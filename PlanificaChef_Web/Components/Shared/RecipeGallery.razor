@using PlanificaChef_Web.Models
@using PlanificaChef_Web.Services
@inject IRecipeService RecipeService

<div class="recipe-modal active">
    <div class="modal-content" style="max-width: 800px;">
        <div class="modal-header">
            <h3>üçΩÔ∏è Seleccionar Platillo</h3>
            <button class="close-modal" @onclick="CloseGallery">√ó</button>
        </div>

        <div class="recipe-gallery">
            @if (recipes.Any())
            {
                @foreach (var recipe in recipes)
                {
                    <div class="recipe-card @(selectedRecipe?.Id == recipe.Id ? "selected" : "")" 
                         @onclick="() => SelectRecipe(recipe)">
                        <div class="recipe-header">
                            <div class="recipe-name">@recipe.Name</div>
                            <div class="recipe-type">@GetMealTypeDisplayName(recipe.MealType)</div>
                        </div>
                        <div class="recipe-price">$@recipe.TotalPrice.ToString("F2")</div>
                        <div class="recipe-ingredients-count">@recipe.Ingredients.Count ingredientes ‚Ä¢ @recipe.PreparationTimeMinutes min</div>
                    </div>
                }
            }
            else
            {
                <p>No hay platillos disponibles. Crea tu primer platillo.</p>
            }
        </div>

        <div style="text-align: center; margin-top: 20px;">
            <button class="btn btn-primary" @onclick="AssignSelectedRecipe" disabled="@(selectedRecipe == null)">
                Asignar a Comida
            </button>
            <button class="btn btn-outline" @onclick="CloseGallery">Cerrar</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Recipe> OnRecipeSelected { get; set; }

    private List<Recipe> recipes = new();
    private Recipe? selectedRecipe;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipes();
    }

    private async Task LoadRecipes()
    {
        try
        {
            recipes = await RecipeService.GetAllRecipesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recipes: {ex.Message}");
            recipes = new List<Recipe>();
        }
    }


    private string GetMealTypeDisplayName(MealType mealType)
    {
        return mealType switch
        {
            MealType.Breakfast => "Desayuno",
            MealType.Lunch => "Almuerzo",
            MealType.Snack => "Merienda",
            MealType.Dinner => "Cena",
            _ => mealType.ToString()
        };
    }

    private void SelectRecipe(Recipe recipe)
    {
        selectedRecipe = recipe;
    }

    private async Task AssignSelectedRecipe()
    {
        if (selectedRecipe != null)
        {
            await OnRecipeSelected.InvokeAsync(selectedRecipe);
        }
    }

    private async Task CloseGallery()
    {
        selectedRecipe = null;
        await OnClose.InvokeAsync();
    }
}

<style>
    .recipe-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        border-radius: 15px;
        padding: 30px;
        max-width: 600px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
        position: relative;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        border-bottom: 2px solid #f1f3f4;
        padding-bottom: 15px;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #6c757d;
        padding: 5px;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .close-modal:hover {
        background: #f1f3f4;
        color: #495057;
    }

    .recipe-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 25px;
    }

    .recipe-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border: 2px solid transparent;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .recipe-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.12);
        border-color: #667eea;
    }

    .recipe-card.selected {
        border-color: #28a745;
        background: #f8fff9;
    }

    .recipe-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 15px;
    }

    .recipe-name {
        font-weight: 600;
        color: #2c3e50;
        font-size: 1.1em;
    }

    .recipe-type {
        background: #e3f2fd;
        color: #1976d2;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        font-weight: 500;
    }

    .recipe-price {
        font-size: 1.2em;
        font-weight: bold;
        color: #28a745;
        margin-bottom: 8px;
    }

    .recipe-ingredients-count {
        color: #6c757d;
        font-size: 0.9em;
    }

    .btn {
        padding: 12px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
        font-size: 14px;
        margin: 0 5px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .btn-primary:disabled {
        background: #e9ecef;
        color: #6c757d;
        cursor: not-allowed;
    }

    .btn-outline {
        background: transparent;
        border: 2px solid #667eea;
        color: #667eea;
    }

    .btn:hover:not(:disabled) {
        transform: translateY(-1px);
    }
</style>