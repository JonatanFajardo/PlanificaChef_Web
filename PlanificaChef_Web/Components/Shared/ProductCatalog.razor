@using PlanificaChef_Web.Services
@using PlanificaChef_Web.Models
@inject IIngredientService IngredientService

<h2 style="margin-bottom: 20px; color: #2c3e50;">游닍 Cat치logo de Productos</h2>
<p>Gestiona tu cat치logo personal de productos frecuentes</p>

<div class="catalog-container">
    <div class="add-product-section">
        <h3>Agregar Nuevo Producto</h3>
        <div class="form-row">
            <input type="text" placeholder="Nombre del producto" class="form-input" @bind="newProductName" />
            <input type="number" placeholder="Precio base" class="form-input" @bind="newProductPrice" step="0.01" />
            <input type="text" placeholder="Unidad (kg, pza, etc.)" class="form-input" @bind="newProductUnit" />
            <button class="btn btn-primary" @onclick="AddProduct">Agregar</button>
        </div>
    </div>

    <div class="products-grid">
        @if (products.Any())
        {
            @foreach (var product in products)
            {
                <div class="product-card @(editingProduct?.Id == product.Id ? "editing" : "")">
                    @if (editingProduct?.Id == product.Id)
                    {
                        <div class="edit-form">
                            <input type="text" class="form-input" @bind="editProductName" placeholder="Nombre del producto" />
                            <input type="number" class="form-input" @bind="editProductPrice" placeholder="Precio base" step="0.01" />
                            <input type="text" class="form-input" @bind="editProductUnit" placeholder="Unidad" />
                            <div class="edit-actions">
                                <button class="btn btn-primary" @onclick="SaveEditProduct">Guardar</button>
                                <button class="btn btn-outline" @onclick="CancelEdit">Cancelar</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="product-name">@product.Name</div>
                        <div class="product-price">$@product.BasePrice.ToString("F2")</div>
                        <div class="product-unit">@product.Unit</div>
                        <div class="product-actions">
                            <button class="btn btn-outline" @onclick="() => EditProduct(product)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Eliminar</button>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <p>No hay productos en el cat치logo.</p>
        }
    </div>
</div>

@code {
    private List<Ingredient> products = new();
    private string newProductName = string.Empty;
    private decimal newProductPrice = 0;
    private string newProductUnit = string.Empty;
    
    // Variables para edici칩n
    private Ingredient? editingProduct = null;
    private string editProductName = string.Empty;
    private decimal editProductPrice = 0;
    private string editProductUnit = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            products = await IngredientService.GetAllIngredientsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading ingredients: {ex.Message}");
            products = new List<Ingredient>();
        }
    }

    private async Task AddProduct()
    {
        if (!string.IsNullOrWhiteSpace(newProductName))
        {
            try
            {
                var newProduct = new Ingredient
                {
                    Name = newProductName,
                    BasePrice = newProductPrice,
                    Unit = newProductUnit
                };

                await IngredientService.CreateIngredientAsync(newProduct);
                await LoadProducts();
                
                // Clear form
                newProductName = string.Empty;
                newProductPrice = 0;
                newProductUnit = string.Empty;
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating ingredient: {ex.Message}");
            }
        }
    }

    private void EditProduct(Ingredient product)
    {
        editingProduct = product;
        editProductName = product.Name;
        editProductPrice = product.BasePrice;
        editProductUnit = product.Unit;
        StateHasChanged();
    }

    private async Task SaveEditProduct()
    {
        if (editingProduct != null && !string.IsNullOrWhiteSpace(editProductName))
        {
            try
            {
                editingProduct.Name = editProductName.Trim();
                editingProduct.BasePrice = editProductPrice;
                editingProduct.Unit = editProductUnit.Trim();

                await IngredientService.UpdateIngredientAsync(editingProduct);
                await LoadProducts();
                CancelEdit();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating ingredient: {ex.Message}");
            }
        }
    }

    private void CancelEdit()
    {
        editingProduct = null;
        editProductName = string.Empty;
        editProductPrice = 0;
        editProductUnit = string.Empty;
        StateHasChanged();
    }

    private async Task DeleteProduct(int productId)
    {
        try
        {
            await IngredientService.DeleteIngredientAsync(productId);
            await LoadProducts();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting ingredient: {ex.Message}");
        }
    }
}

<style>
    .catalog-container {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.08);
    }

    .add-product-section {
        margin-bottom: 30px;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
    }

    .add-product-section h3 {
        margin-bottom: 15px;
        color: #2c3e50;
    }

    .form-row {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr auto;
        gap: 15px;
        align-items: center;
    }

    .form-input {
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 16px;
    }

    .form-input:focus {
        outline: none;
        border-color: #667eea;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    .product-card {
        padding: 20px;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        transition: all 0.3s ease;
    }

    .product-card:hover {
        border-color: #667eea;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .product-name {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
    }

    .product-price {
        font-size: 1.2em;
        font-weight: bold;
        color: #28a745;
        margin-bottom: 4px;
    }

    .product-unit {
        color: #6c757d;
        margin-bottom: 15px;
    }

    .product-actions {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 500;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 2px solid #667eea;
        color: #667eea;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn:hover {
        transform: translateY(-1px);
    }

    .product-card.editing {
        border-color: #667eea;
        background: #f8f9ff;
    }

    .edit-form {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .edit-form .form-input {
        padding: 8px 12px;
        border: 2px solid #e9ecef;
        border-radius: 6px;
        font-size: 14px;
    }

    .edit-form .form-input:focus {
        outline: none;
        border-color: #667eea;
    }

    .edit-actions {
        display: flex;
        gap: 8px;
        margin-top: 5px;
    }

    .edit-actions .btn {
        padding: 6px 12px;
        font-size: 12px;
    }

</style>