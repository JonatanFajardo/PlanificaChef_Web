@using PlanificaChef_Web.Models
@using PlanificaChef_Web.Services
@inject IShoppingListService ShoppingListService

<h2 style="margin-bottom: 20px; color: #2c3e50;">ðŸ“Š Historial de Compras</h2>
<p>Revisa tus compras anteriores y analiza tus patrones</p>

<div class="history-container">
    <div class="summary-cards">
        <div class="summary-card">
            <div class="summary-icon">ðŸ“…</div>
            <div class="summary-info">
                <div class="summary-number">@completedLists</div>
                <div class="summary-label">Listas Completadas</div>
            </div>
        </div>
        
        <div class="summary-card">
            <div class="summary-icon">ðŸ’°</div>
            <div class="summary-info">
                <div class="summary-number">$@totalSpent.ToString("F2")</div>
                <div class="summary-label">Total Gastado</div>
            </div>
        </div>
        
        <div class="summary-card">
            <div class="summary-icon">ðŸ“ˆ</div>
            <div class="summary-info">
                <div class="summary-number">$@averagePerList.ToString("F2")</div>
                <div class="summary-label">Promedio por Lista</div>
            </div>
        </div>
    </div>

    <div class="history-list">
        <h3>Listas Anteriores</h3>
        @if (shoppingHistory.Any())
        {
            @foreach (var list in shoppingHistory)
            {
                <div class="history-item">
                    <div class="history-header">
                        <div class="history-name">@list.Name</div>
                        <div class="history-date">@list.CreatedAt.ToString("dd/MM/yyyy")</div>
                    </div>
                    <div class="history-details">
                        <div class="history-stats">
                            <span class="stat">@list.Items.Count productos</span>
                            <span class="stat">$@list.TotalEstimated.ToString("F2")</span>
                            <span class="stat status-@(list.IsCompleted ? "completed" : "pending")">
                                @(list.IsCompleted ? "Completada" : "Pendiente")
                            </span>
                        </div>
                        <button class="btn btn-outline" @onclick="() => ViewListDetails(list.Id)">Ver Detalles</button>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No hay historial de compras disponible.</p>
        }
    </div>
</div>

@code {
    private List<ShoppingList> shoppingHistory = new();
    private int completedLists = 0;
    private decimal totalSpent = 0;
    private decimal averagePerList = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadHistory();
    }

    private async Task LoadHistory()
    {
        try
        {
            // Cargar todas las listas completadas
            var allLists = await ShoppingListService.GetAllShoppingListsAsync();
            shoppingHistory = allLists
                .Where(list => list.IsCompleted)
                .OrderByDescending(list => list.CreatedAt)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading shopping history: {ex.Message}");
            shoppingHistory = new List<ShoppingList>();
        }

        // Populate items for each list
        foreach (var list in shoppingHistory)
        {
            for (int i = 0; i < 8; i++)
            {
                list.Items.Add(new ShoppingListItem());
            }
        }

        CalculateStats();
    }

    private void CalculateStats()
    {
        completedLists = shoppingHistory.Count(l => l.IsCompleted);
        totalSpent = shoppingHistory.Where(l => l.IsCompleted).Sum(l => l.TotalEstimated);
        averagePerList = completedLists > 0 ? totalSpent / completedLists : 0;
    }

    private void ViewListDetails(int listId)
    {
        var selectedList = shoppingHistory.FirstOrDefault(l => l.Id == listId);
        if (selectedList != null)
        {
            // Por ahora solo mostrar informaciÃ³n en consola
            // En el futuro se podrÃ­a abrir un modal con los detalles
            Console.WriteLine($"Viewing details for list: {selectedList.Name}");
            Console.WriteLine($"Items count: {selectedList.Items.Count}");
            Console.WriteLine($"Total cost: ${selectedList.TotalEstimated:F2}");
        }
    }
}

<style>
    .history-container {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.08);
    }

    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .summary-card {
        display: flex;
        align-items: center;
        padding: 20px;
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-radius: 12px;
        gap: 15px;
    }

    .summary-icon {
        font-size: 2em;
    }

    .summary-number {
        font-size: 1.8em;
        font-weight: bold;
        color: #667eea;
    }

    .summary-label {
        color: #6c757d;
        font-size: 0.9em;
    }

    .history-list h3 {
        color: #2c3e50;
        margin-bottom: 20px;
    }

    .history-item {
        padding: 20px;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        margin-bottom: 15px;
        transition: all 0.3s ease;
    }

    .history-item:hover {
        border-color: #667eea;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .history-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .history-name {
        font-weight: 600;
        color: #2c3e50;
        font-size: 1.1em;
    }

    .history-date {
        color: #6c757d;
        font-size: 0.9em;
    }

    .history-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .history-stats {
        display: flex;
        gap: 15px;
    }

    .stat {
        padding: 4px 8px;
        background: #f8f9fa;
        border-radius: 6px;
        font-size: 0.9em;
    }

    .status-completed {
        background: #d4edda;
        color: #155724;
    }

    .status-pending {
        background: #fff3cd;
        color: #856404;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 500;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .btn-outline {
        background: transparent;
        border: 2px solid #667eea;
        color: #667eea;
    }

    .btn-outline:hover {
        background: #667eea;
        color: white;
    }

</style>