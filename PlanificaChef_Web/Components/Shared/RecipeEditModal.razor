@using PlanificaChef_Web.Models
@using PlanificaChef_Web.Services
@inject IRecipeService RecipeService
@inject IIngredientService IngredientService

<div class="recipe-modal active">
    <div class="modal-content">
        <div class="modal-header">
            <h3>‚úèÔ∏è Editar Platillo</h3>
            <button class="close-modal" @onclick="CloseModal">√ó</button>
        </div>

        <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
            <div class="form-group">
                <label class="form-label">Nombre del Platillo</label>
                <input type="text" class="form-input" @bind="recipeName" placeholder="Ej: Pollo a la plancha con verduras" required>
            </div>

            <div class="form-group">
                <label class="form-label">Tipo de Comida</label>
                <select class="form-select" @bind="selectedMealType" required>
                    <option value="">Seleccionar...</option>
                    <option value="@MealType.Breakfast">Desayuno</option>
                    <option value="@MealType.Lunch">Almuerzo</option>
                    <option value="@MealType.Snack">Merienda</option>
                    <option value="@MealType.Dinner">Cena</option>
                </select>
            </div>

            <div class="form-group">
                <label class="form-label">Tiempo de Preparaci√≥n (minutos)</label>
                <input type="number" class="form-input" @bind="preparationTime" placeholder="30" min="1">
            </div>

            <div class="form-group">
                <label class="form-label">Ingredientes</label>
                <div class="ingredient-builder">
                    @for (int i = 0; i < ingredients.Count; i++)
                    {
                        var index = i;
                        <div class="ingredient-row">
                            <input type="text" class="form-input" @bind="ingredients[index].Name" placeholder="Nombre del ingrediente" required>
                            <input type="text" class="form-input" @bind="ingredients[index].Quantity" placeholder="Cantidad">
                            <input type="number" class="form-input" @bind="ingredients[index].Price" placeholder="Precio" step="0.01" min="0">
                            <button type="button" class="remove-ingredient" @onclick="() => RemoveIngredient(index)">√ó</button>
                        </div>
                    }
                </div>
                <button type="button" class="add-ingredient-row" @onclick="AddIngredient">+ Agregar Ingrediente</button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    @errorMessage
                </div>
            }

            <div style="display: flex; gap: 15px; justify-content: flex-end; margin-top: 30px;">
                <button type="button" class="btn btn-outline" @onclick="CloseModal" disabled="@isUpdating">Cancelar</button>
                <button type="submit" class="btn btn-primary @(isUpdating ? "loading" : "")" disabled="@isUpdating">
                    @if (isUpdating)
                    {
                        <span>üîÑ Actualizando...</span>
                    }
                    else
                    {
                        <span>Actualizar Platillo</span>
                    }
                </button>
            </div>
        </form>
    </div>
</div>

@code {
    [Parameter] public Recipe Recipe { get; set; } = null!;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnRecipeUpdated { get; set; }

    private string recipeName = string.Empty;
    private MealType? selectedMealType;
    private int preparationTime = 30;
    private List<IngredientRow> ingredients = new();
    private List<Ingredient> availableIngredients = new();
    private bool isUpdating = false;
    private string? errorMessage = null;

    private class IngredientRow
    {
        public string Name { get; set; } = string.Empty;
        public string Quantity { get; set; } = string.Empty;
        public decimal Price { get; set; } = 0;
        public int? IngredientId { get; set; } = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableIngredients();
        LoadRecipeData();
    }

    private async Task LoadAvailableIngredients()
    {
        try
        {
            availableIngredients = await IngredientService.GetAllIngredientsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading ingredients: {ex.Message}");
            availableIngredients = new List<Ingredient>();
        }
    }

    private void LoadRecipeData()
    {
        if (Recipe != null)
        {
            recipeName = Recipe.Name;
            selectedMealType = Recipe.MealType;
            preparationTime = Recipe.PreparationTimeMinutes;

            ingredients = Recipe.Ingredients.Select(ri => new IngredientRow
            {
                Name = ri.Ingredient.Name,
                Quantity = ri.Quantity,
                Price = ri.Price,
                IngredientId = ri.IngredientId
            }).ToList();

            if (!ingredients.Any())
            {
                ingredients.Add(new IngredientRow());
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (IsFormValid())
        {
            try
            {
                isUpdating = true;
                errorMessage = null;
                StateHasChanged();

                // Actualizar propiedades b√°sicas de la receta
                Recipe.Name = recipeName.Trim();
                Recipe.MealType = selectedMealType.Value;
                Recipe.PreparationTimeMinutes = preparationTime;

                // Limpiar ingredientes existentes
                Recipe.Ingredients.Clear();

                // Procesar ingredientes
                foreach (var ingredientRow in ingredients.Where(i => !string.IsNullOrWhiteSpace(i.Name)))
                {
                    // Buscar o crear ingrediente
                    var existingIngredient = availableIngredients
                        .FirstOrDefault(ing => ing.Name.Equals(ingredientRow.Name.Trim(), StringComparison.OrdinalIgnoreCase));
                    
                    Ingredient ingredient;
                    if (existingIngredient != null)
                    {
                        ingredient = existingIngredient;
                    }
                    else
                    {
                        // Crear nuevo ingrediente si no existe
                        ingredient = new Ingredient
                        {
                            Name = ingredientRow.Name.Trim(),
                            BasePrice = ingredientRow.Price > 0 ? ingredientRow.Price : 10.00m,
                            Unit = "unidad"
                        };
                        ingredient = await IngredientService.CreateIngredientAsync(ingredient);
                    }

                    // Agregar a la receta
                    var recipeIngredient = new RecipeIngredient
                    {
                        RecipeId = Recipe.Id,
                        IngredientId = ingredient.Id,
                        Ingredient = ingredient,
                        Quantity = !string.IsNullOrWhiteSpace(ingredientRow.Quantity) ? ingredientRow.Quantity : "1",
                        Price = ingredientRow.Price
                    };
                    Recipe.Ingredients.Add(recipeIngredient);
                }

                // Actualizar la receta
                await RecipeService.UpdateRecipeAsync(Recipe);
                
                await OnRecipeUpdated.InvokeAsync();
                await CloseModal();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al actualizar la receta: {ex.Message}";
                Console.WriteLine($"Error updating recipe: {ex.Message}");
            }
            finally
            {
                isUpdating = false;
                StateHasChanged();
            }
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(recipeName) && 
               selectedMealType.HasValue && 
               ingredients.Any(i => !string.IsNullOrWhiteSpace(i.Name));
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private void AddIngredient()
    {
        ingredients.Add(new IngredientRow());
    }

    private void RemoveIngredient(int index)
    {
        if (ingredients.Count > 1)
        {
            ingredients.RemoveAt(index);
        }
    }
}

<style>
    .recipe-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1100;
    }

    .modal-content {
        background: white;
        border-radius: 15px;
        padding: 30px;
        max-width: 600px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
        position: relative;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        border-bottom: 2px solid #f1f3f4;
        padding-bottom: 15px;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #6c757d;
        padding: 5px;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .close-modal:hover {
        background: #f1f3f4;
        color: #495057;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        font-weight: 600;
        margin-bottom: 8px;
        color: #2c3e50;
    }

    .form-input, .form-select {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.3s ease;
    }

    .form-input:focus, .form-select:focus {
        outline: none;
        border-color: #667eea;
    }

    .ingredient-builder {
        border: 2px dashed #dee2e6;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .ingredient-row {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr auto;
        gap: 10px;
        align-items: center;
        margin-bottom: 10px;
    }

    .remove-ingredient {
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .add-ingredient-row {
        background: #28a745;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 15px;
        cursor: pointer;
        font-size: 14px;
    }

    .btn {
        padding: 12px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
        font-size: 14px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 2px solid #667eea;
        color: #667eea;
    }

    .btn:hover:not(:disabled) {
        transform: translateY(-1px);
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .btn.loading {
        opacity: 0.8;
    }

    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 12px 15px;
        border-radius: 8px;
        border: 1px solid #f5c6cb;
        margin-bottom: 20px;
        font-size: 14px;
    }
</style>